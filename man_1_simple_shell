.\" Automatically generated by Pandoc 2.5
.\"
.TH "SIMPLE_SHELL" "1" "User Manual" "simple_shell" "22 August 2021"
.hy
.SS NAME
.PP
\f[I]simple_shell\f[R] Program that emulate shell
.SS SYNOPSIS
.PP
\f[B]#include \[lq]shell.h\[rq]\f[R]
.PP
\f[I]int main(int argc __attribute__((unused)), char **argv, char
**environment)\f[R]
.SS DESCRIPTION
.PP
The simple_shell program executes a main program that creates and
displays a prompt, reads a n number of arguments, tokenizes the args
received, if the function is built in the program executes, and if the
function is Not Built in, finds in the path, reads the function in the
directory and executes to finally return to the prompt
.SS FUNCTION BUILT IN
.IP \[bu] 2
env
.IP \[bu] 2
exit
.SS INVOCATION
.PP
This program doesnt need a previous instalation but this needs
compilates the program with this option
.PP
\f[I]gcc \-Wall \-Werror \-Wextra \-pedantic \-std=gnu89 *.c \-o
simple_shell\f[R]
.PP
Then, you can executes the ./simple_shell to run your program
.SS RETURN VALUE
.PP
The Return depends de args write in the input of the program, is not the
same if we write a \[lq]pwd\[rq] command that if we writes a word that
is not a command
.SS EXAMPLE
.PP
\f[B]input\f[R]
.PP
\[ti]/simple_shell$ ./a.out $ pwd
.PP
\f[B]output\f[R]
.PP
/home/afecego/simple_shell $
.PP
\f[B]input\f[R]
.PP
\[ti]/simple_shell$ ./a.out $ 111
.PP
\f[B]output\f[R]
.PP
command not found $
.SS FILES
.IP \[bu] 2
_path.c
.IP \[bu] 2
_strcmp\-_strcat.c
.IP \[bu] 2
_strdup.c
.IP \[bu] 2
_strlen\-_puts.c
.IP \[bu] 2
AUTHORS
.IP \[bu] 2
generate\-authors.sh
.IP \[bu] 2
get_struc.c
.IP \[bu] 2
main.c
.IP \[bu] 2
make_env_free_env.c
.IP \[bu] 2
man
.IP \[bu] 2
pathexe_checkdir.c
.IP \[bu] 2
README.md
.IP \[bu] 2
shell.h
.IP \[bu] 2
tokenizer.c
.SS FUNCTIONS INCLUDED
.IP \[bu] 2
void path_(vars_f *vars)
.IP \[bu] 2
void print_error(vars_f *vars, char *msg)
.IP \[bu] 2
int _strcmp(char *s1, char *s2)
.IP \[bu] 2
char *_strcat(char *s1, char *s2)
.IP \[bu] 2
char *_strdup(char *s1)
.IP \[bu] 2
unsigned int _strlen(char *str)
.IP \[bu] 2
void _puts(char *str)
.IP \[bu] 2
char (*get_struc(vars_f *vars)) (vars_f *vars)
.IP \[bu] 2
char func_exit(vars_f *vars)
.IP \[bu] 2
char func_env(vars_f *vars)
.IP \[bu] 2
char **make_env(char **env2)
.IP \[bu] 2
void free_env(char **env)
.IP \[bu] 2
void path_exec_dir(vars_f *vars)
.IP \[bu] 2
int check_for_dir(char *str)
.IP \[bu] 2
char *f_paht(char **env)
.IP \[bu] 2
char **tokenizer(char *buffer, char *delimiter)
.IP \[bu] 2
char **NewRealloc(char **cat, size_t *size)
.IP \[bu] 2
void path_concat(vars_f *vars, char *str2)
.SS SEE ALSO
.PP
All the details of this project are included in the README file of the
project repository in the next link:
.PP
<https://github.com/afecego/simple_shell/blob/main/README.md>
.SS AUTHORS
.PP
Adrian Felipe Ceron <https://github.com/afecego>
.PP
Paula Carvajal <https://github.com/paulacarvani>
